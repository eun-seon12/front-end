## 1. 클래스 기본 문법

### 1) 클래스 선언

class Student {
    constructor(name) {
        this.group = 1;
        this.name = name;
    }
    introduce() {
        console.log(`안녕하세요. 저는 ${this.group}반 학생 ${this.name} 입니다.`);
    }
}

let student = new Student('홍길동');
student.introduce();

console.log(typeof Student);
console.log(Student === Student.prototype.constructor);     
console.log(Student.prototype.introduce);                   
console.log(Object.getOwnPropertyNames(Student.prototype)); 

function Teacher(name) {
    this.group = 1;
    this.name = name;
}

Teacher.prototype.introduce = function() {
    console.log(`안녕하세요. 저는 ${this.group}반 교사 ${this.name} 입니다.`);
}

let teacher = new Teacher('유관순');
teacher.introduce();

new Student();
Teacher();

### 2) 클래스 표현식

(1) 익명 클래스 표현식

(2) 기명 클래스 표현식

(3) 클래스 동적 생성

### 3) getter, setter

## 2. 클래스 상속

### 1) 상속 기본 문법

### 2) 메서드 오버라이딩

### 3) 생성자 오버라이딩

class Animal {

    constructor(name, weight) {
        this.name = name;
        this.weight = weight;
    }

    eat(foodWeight) {
        this.weight += foodWeight;
        console.log(`${this.name}(은)는 ${foodWeight}kg의 식사를 하고 ${this.weight}kg이 되었습니다.`);
    }

    move(lostWeight) {
        if(this.weight > lostWeight)
            this.weight -= lostWeight;
        console.log(`${this.name}(은)는 움직임으로 인해 ${lostWeight}kg 감량되어 ${this.weight}kg이 되었습니다.`);
    }
}

class Deer extends Animal {

    constructor(name, weight, legLength) {
        super(name, weight);
        this.legLength = legLength;
    }

    hide(place) {
        console.log(`${this.name}(은)는 ${place}에 숨습니다.`);
    }
}

let deer = new Deer('사슴', 40, 4);
deer.hide('동굴 안');
