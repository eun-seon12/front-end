# Distructuring Assignment

구조 분해 할당을 사용하면 배열이나 객체를 변수로 분해하여 연결할 수 있음!

## 1. 배열 구조 분해 할당 (Array distructuring assignment)

### 1) 배열 구조 분해 할당

--------------------------------------------------------------------------
let nameArr = ["Gildong", "Hong"]; //이름과 성을 요소로 가진 배열 

let firstName = nameArr[0];
let lastNamestName = nameArr[1]; //원래 이렇게 쓰는걸

let [firstName, lastName]= nameArr; //간단하게 한 줄로 적을 수 있음

let [firstName2, lastName2] = "Saimdang Shin".split(' ');
// split(' '); <- 공백을 한 칸 줘서 나누겠다
--------------------------------------------------------------------------

### 2) 다양한 사용법

- 할당 연산자 우측에는 모든 이터러블이 올 수 있고 할당 연산자 좌측엔 뭐든지 올 수 있음

객체 프로퍼티도 가능

--------------------------------------------------------------------------
let user = {}; //객체리터럴문법
[user.firstName, user.lastName]= "Gwansoon Yu".split(' ');
--------------------------------------------------------------------------

- 변수 교환 용도로도 사용 할 수 있음

--------------------------------------------------------------------------
let student = "유관순";
let teacher = "홍길동";

[student, teacher] = [teacher, student];
--------------------------------------------------------------------------

- 나머지 매개변수로 나머지 요소를 한 번에 가져 올 수도 있음

--------------------------------------------------------------------------
let [sign1, sign2, ...rest] = ["양자리", "황소자리", "쌍둥이자리", "게자리", "사자자리"];

console.log(rest); //배열로담아서한번에가져옴
--------------------------------------------------------------------------
- 기본 값을 설정하고 사용할 수 있음

--------------------------------------------------------------------------
let [firstName4 = "아무개", lastName4 = "김"] = ["길동"];
console.log(firstName4); // 배열에서받아온값
console.log(lastName4); // 기본값
--------------------------------------------------------------------------

## 2. 객체 구조 분해 할당 (Object distructuring assignment)

### 1) 객체 구조 분해 할당

--------------------------------------------------------------------------
// 상품명과 색상, 가격을 프로퍼티로 가지는 객체
let pants = {
    productName : "바지",
    color : "검정색",
    price : 30000
};

let {productName, color, price} = pants;

console.log(productName);
console.log(color);
console.log(price);

// 각 변수의 서술 순서는 무관하며 {객체 프로퍼티 : 목표 변수} 형식으로도 작성할 수 있다.
let {color : co, price : pr, productName : pn} = pants;
console.log(co);
console.log(pr);
console.log(pn);
--------------------------------------------------------------------------

### 2) 다양한 사용법

객체에 존재하지 않는 프로퍼티는 기본 값을 설정해서 사용

콜론과 할당을 동시에 사용할 수 있음

--------------------------------------------------------------------------
let shirts = {
    productName : '셔츠'
};

let { productName : productName2 = "어떤 상품", color : color2 = "어떤 색상", price : price2 = 0} =shirts;
console.log(productName2);
console.log(color2);
console.log(price2);
--------------------------------------------------------------------------

프로퍼티가 많은 복잡한 객체에서 원하는 정보만 뽑아오는 것도 가능

--------------------------------------------------------------------------
let pants = {
    productName : "바지",
    color : "검정색",
    price : 30000
};

let {productName : productName3} = pants;
console.log(productName3);
--------------------------------------------------------------------------

나머지 매개변수로 나머지 요소를 한 번에 가져올 수도 있음

--------------------------------------------------------------------------
let {productName : productName4, ...rest} = pants;
console.log(productName4); //바지
console.log(rest.color); //검정색
console.log(rest.price); //30000
--------------------------------------------------------------------------

### 3) 중첩 구조 분해

여러 줄에 걸쳐 작성하여 의도하는 바를 명확히 드러낸다

--------------------------------------------------------------------------
let product = {
    size : {
        width : 10,
        height : 30
    },
    
    items : ["doll", "robot"]
};

let {
    size : {
        width,
        height
    },

    items : [item1, item2],
    producer = "홍길동" //기본값할당
} = product;
--------------------------------------------------------------------------

### 4) 함수 매개변수

함수의 매개변수가 많거나 매개변수 기본 값이 필요한 경우 등에 활용

function displayProduct(product=”아무개”, width=0, height=0, item=[ ]) { }

// 위와 같은 함수는 넘겨주는 인수의 순서가 고정되어 있어 순서가 바뀌면 문제가 생기고 기본 값 사용 시에도 undefined를 이용해서 인수를 넘겨줘야만 함

displayProduct(”신사임당”, undefined, undefined, [”Coffee”, “Donut”]);

→ 구조 분해 할당을 이용하면 문제점이 해결됨

순서가 무관하고 기본 값 활용 시에도 별도의 처리가 불필요함
--------------------------------------------------------------------------
function displayProduct({producer="아무개", width=10, height=20, items =[]}) {
    console.log(`${producer} ${width} ${height}`);
    console.log(items);
}
// 함수에 전달할 객체
let exampleProduct = {
    items : ["Coffee", "Donut"],
    producer : "신사임당"
};

displayProduct(exampleProduct);
--------------------------------------------------------------------------
