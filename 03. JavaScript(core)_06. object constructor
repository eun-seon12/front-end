## 1. 객체 생성자 함수 (object constructor function)

 객체를 생성하는 방법에는 5가지가 있는데 그 중 하나

- object 생성자 함수
    
    : new 연산자와 함꼐 Object 생성자 함수를 호출하면 빈 객체를 생성하여 반환한다.
    
    빈 객체 생성 이후 프로퍼티 또는 메서드를 추가하여 객체를 완성할 수 있다.
    
    ```jsx
    // 빈 객체 생성
    const student = new Object(); // const student = {}; <- 객체 리터럴과 같은 것
    
    // 동적으로 프로퍼티 추가
    student.name = '유관순';
    student.age = '16';
    
    console.log(student);
    ```
    

## 2. 생성자 함수 (constructor function)

```jsx
// 코드가 직관적이고 편하지만 딱 하나만 만들 수 있음 100명이면 100개 필요
const student1 = {
    name : '유관순',
    age : 16,
    getInfo : function() {
        return `${this.name}(은)는 ${this.age}세입니다.`
    }
};

const student2 = {
    name : '홍길동',
    age : 20,
    getInfo : function() {
        return `${this.name}(은)는 ${this.age}세입니다.`
    }
};
```

→ 객체 리터럴에 의한 객체 생성

```jsx
// 객체를 생성하기 위한 템플릿처럼 생성자 함수를 사용하여
// 프로퍼티 구조가 동일할 때 객체를 여러 개 간편하게 생성할 수 있다.
function Student(name, age){ // 반드시앞글자는 대문자
    // 생성자 함수 내부의 this는 생성자 함수가 생성할 인스턴스를 가리킨다.
    this.name = name;
    this.age = age;
    this.getInfo = function() {
        return `${this.name}(은)는 ${this.age}세입니다.`;
    }
}

const student3 = new Student('장보고', 30); //Student 함수를 호출하는 것
const student4 = new Student('신사임당', 40);

console.log(student3.getInfo());
console.log(student4.getInfo());

// 생성자 함수 하나를 만들어서 간편하게 여러개의 객체를 생성함
```

→ 생성자 함수에 의한 객체 생성
