## 1. object(객체)

     : 자바스크립트는 객체 기반 프로그래밍 언어로 원시 값 제외 모두 객체 타입

프로퍼티로 구성 된 집합이며 프로퍼티는 키(key)와 값(value)로 구성

자바스크립트에서 사용할 수 있는 모든 값은 프로퍼티 값이 될 수 o

프로퍼티 값이 함수일 경우 method 메서드라고 부름

- **객체 생성 방법**
    1. 객체 리터럴 ({ })
    2. object 생성자 함수
    3. 생성자 함수
    4. Object.create 메서드
    5. Class(ES6)
    
    가장 일반적이고 간단한 방법은 객체 리터럴
    

```html
var student = {
    // 프로퍼티 : 객체의 상태를 나타내는 값(data)
    name : '유관순', // <- 프로퍼티가 여러 개일 때 쉼표
    age : 16,
    // 메서드 : 프로퍼티(상태 데이터)를 참조하고 조작할 수 있는 동작
    genInfo : function(){
        return `${this.name}(은)는 ${this.age}세입니다.`
    }
};

console.log(typeof student); //object
console.log(student); //{ name: '유관순', age: 16, genInfo: [Function: genInfo] }
console.table(student); 

var student2 = {};
console.log(typeof student2); //object
console.log(student2); //{}
// -> 프로퍼티(키와 밸류)를 정의하지 않을 시 빈 객체가 생성됨
```

## 2. property(속성)

### 1) 프로퍼티

key(키)와 value(값)으로 구성

```jsx
var student = {

    name : '유관순', // <-프로퍼티 나열은 쉼표로 구분, 마지막은 쉼표 생략 가능
    age : 20
    
};
```

key : name, age / value : ‘유관순’, 20

```jsx
var obj = {
    normal : 'normal value',
    '@ s p a c e @' : 'space value', 
    // 이렇겐 잘 안 씀
    '' : '', 
    // 빈 문자열 키는 오류 발생x 논리적으로 문제가 생길 수 있어서 권장x
    0 : 1, 
    // 숫자 key 는 내부적으로 문자열로 변환
    var : 'var', 
    // 예약어(var const false true) 키는 오류 발생x 권장x
    normal : 'new value' 
    // 이미 존재하는 키를 중복 선언하면 나중에 선언한 프로퍼티로 덮어씀
};

var key = 'test';
obj[key] = 'test value'; 
// 프로퍼티 key는 대괄호 표기법으로 동적으로 생성함

console.log(obj); 
//
{
  '0': 1,
  normal: 'new value',
  '@ s p a c e @': 'space value',
  '': '',
  var: 'var',
  test: 'test value'
}
// 
```

프로퍼티 키 : 빈 문자열을 포함하는 모든 문자열 → 프로퍼티 값에 접근하기 위한 식별자

프로퍼티 값 : 자바스크립트에서 사용할 수 있는 모든 데이터 값

### 2) method

자바스크립트의 함수→객체

함수는 값으로 취급할 수도 있고 프로퍼티 값으로 사용 할 수 o

```jsx
var dog = {
    name : '뽀삐',
    eat : function(food) { // <- 이 때, food는 함수의 매개변수(파라미터)
        // -> 내부 프로퍼티에 접근할 때는 this를 붙여야함
        console.log(`${this.name}(은)는 ${food}를 맛있게 먹어요.`);
        //뽀삐(은)는 고구마를 맛있게 먹어요.
    }
};

dog.eat('고구마'); // <- 괄호 안은 전달인자(아규먼트)
```

### 3) property accessor (프로퍼티 접근)

```jsx
var dog = {
    name : '뽀삐',
    eat : function (food) {
        console.log(`${this.name}(은)는 ${food}를 맛있게 먹어요.`);
    }
};
```

- 마침표 표기법

```
console.log(dog.name); //뽀삐
dog.eat('고구마'); //뽀삐(은)는 고구마를 맛있게 먹어요.
```

- 대괄호 표기법

- 프로퍼티 키는 반드시 따옴표로 감싼 문자열 사용

```jsx
console.log(dog['name']); //뽀삐
dog['eat']('고구마'); //뽀삐(은)는 고구마를 맛있게 먹어요.
```

- 프로퍼티 키가 식별자 네이밍 규칙을 준수하지 않는 이름일 경우 반드시 대괄호 표기법 사용

```jsx
var obj = {
    'dash-key' : 'dash-value',
    0 : 1
};

// console.log(obj.dash-key);
// console.log(obj.'dash-key');
// console.log(obj[dash-key]);
console.log(obj['dash-key']); //dash-value

// console.log(obj.0);
// console.log(obj.'0');
console.log(obj[0]); //1
console.log(obj['0']); //1
```

### 4) property change, add, remove(프로퍼티 값 변경, 추가, 삭제)

```jsx
var dog = {
    name : '뽀삐'
};

// 이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신됨
dog.name = '두부';
dog['name'] = '두부';
console.log(dog); // { name : '두부' }

// 프로퍼티 동적 추가
// 존재하지x 프로퍼티에 값 할당-> 프로퍼티 동적으로 생성돼 추가되고 값이 할당됨
dog.age = 3;
dog['age'] = 3;
console.log(dog); // { name : '두부', age : 3 }

// 프로퍼티 삭제
// delete 연산자는 객체의 프로퍼티를 삭제함
// 만약 존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시됨
delete dog.age;
delete dog['age'];
delete dog.something;
console.log(dog); // { name : '두부' }
```

## 3. ES6

### 1) property value shorthand(프로퍼티 값 단축 구문)

ES6에서는 프로퍼티 값으로 변수를 사용하는 경우

변수 이름과 프로퍼티 키가 동일한 이름일 때 프로퍼티 키를 생략 가능함

프로퍼티 키는 변수 이름으로 자동 생성

```jsx
var id = 'p-001';
var price = 30000;

var product = {
    id : id,
    price : price
};

console.log(product); // { id: 'p-001', price: 30000 }

var product2 = {id, price};
console.log(product2); // { id: 'p-001', price: 30000 }
```

### 2) method shorthand(메서드 단축)

ES6에서는 메서드를 정의할 때 function 키워드를 생략한 축약 표현 사용 가능

```jsx
var dog = {
    name : '뽀삐',
    eat(food) { 
        console.log(`${this.name}(은)는 ${food}를 맛있게 먹어요.`);
    }
};

dog.eat('고구마');
```

## 4. additional-operator-and-traversal(추가 연산자와 순회)

### 1) in operator(in 연산자)

이용하여 프로퍼티 존재 여부 확인

```jsx
var student = {    
	name : '유관순',
    age : 16,
    test : undefined
};

console.log(student.name === undefined);  //false
console.log(student.height === undefined);  //true
console.log(student.test === undefined);  //true0
// -> true - 존재하지 않음으로 판별되는 문제 발생 in 연산자를 사용하는게 좋음

console.log("name" in student);       // true - 존재
console.log("height" in student);     // false - 존재하지 않음
console.log("test" in student);       // true
```

### 2) for in

이용하여 객체의 모든 키를 순회할 수 있음

```jsx
var student = {    
	name : '유관순',    
	age : 16,
    getInfo : function(){
        return `${this.name}(은)는 ${this.age}세입니다.`;
    }
};

for (var key in student) {
    console.log(`key : ${key}`);    
		console.log(`student[key] : ${student[key]}`); // name : '유관순', age : 16 출력
}
```

//

key : name

student[key] : 유관순

key : age

student[key] : 16

key : getInfo

student[key] : function(){

       return `{this.name}(은)는 ${this.age}세입니다.`;

}
