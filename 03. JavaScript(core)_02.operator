# Operator

## 1. comparison operator(비교 연산자)

     : 좌항과 우항의 비교 연산자를 비교한 다음 결과를 논리값으로 반환함

주로 if문이나 for문 같은 제어문 조건식에서 사용

### 1) 동등 비교 연산자 ( ==, ! = )

: 먼저 암묵적 타입 변환을 통해 타입을 일치시킨 후, 같은 값인지 비교

### 2) 일치 비교 연산자 ( ===, ! == )

: 타입과 값이 모두 일치하는지 비교

- 숫자 1, 문자 ‘1’, true 비교

```jsx
console.log(`1 == 1 : ${1 == '1'}`); //1 == 1 : true
console.log(`1 == true : ${1 == true}`); //1 == true : true

console.log(`1 === 1 : ${1 === '1'}`); //1 === 1 : false
console.log(`1 === true : ${1 === true}`); //1 === true : false
```

→ 암묵적 타입 변환이 안되기 때문에 타입이 다름 따라서 false

- 숫자 0, 문자 ‘0’, 빈 문자열 ‘ ’, false 비교

```jsx
console.log(`0 == '0' : ${0 == '0'}`); //0 == '0' : true
console.log(`0 == '' : ${0 == ''}`); //0 == '' : true
console.log(`0 == 'false' : ${0 == 'false'}`); //0 == 'false' : false

console.log(`0 === '0' : ${0 === '0'}`); //0 === '0' : false
console.log(`0 === '' : ${0 === ''}`); //0 === '' : false
console.log(`0 === 'false' : ${0 === 'false'}`); //0 === 'false' : false
```

→ 암묵적 타입 변환이 안되기 때문에 타입이 다름 따라서 false

- null, undefined 비교

```jsx
console.log(`null == undefined : ${null == undefined}`); 
//null == undefined : true
console.log(`null === undefined : ${null === undefined}`); 
//null === undefined : false
```

- NaN은 자신과 일치하지 않는 유일한 값임

```jsx
console.log(`NaN == NaN : ${NaN == NaN}`); //NaN == NaN : false
console.log(`NaN === NaN : ${NaN === NaN}`); //NaN === NaN : false
```

따라서 빌트인 함수 Number.isNaN( )을 사용해서 확인해야 함

```jsx
console.log(Number.isNaN(NaN) : ${Number.isNaN(NaN)}); 
//Number.isNaN(NaN) : true
```

- 비교 연산자를 통해 문자열끼리 비교도 가능하며 유니코드 순으로 비교
    
    : 65A, 90Z, 97a, 122z
    

```jsx
		console.log(`'hello' === 'hello' : ${'hello' === 'hello'}`);
		//'hello' === 'hello' : true
    console.log(`'hello' !== 'hello' : ${'hello' !== 'hello'}`);
    //'hello' !== 'hello' : false

    console.log(`'apple' < 'banana' : ${'apple' < 'banana'}`);
    //'apple' < 'banana' : true
    console.log(`'apple' > 'banana' : ${'apple' > 'banana'}`);
    //'apple' > 'banana' : false
    console.log(`'cat' >= 'Zoo' : ${'cat' >= 'Zoo'}`); 
    //'cat' >= 'Zoo' : true
    // -> 대문자가 소문자보다 작다
```

## 2. logical operator(논리 연산자)

### 1) ||(OR)

```jsx
console.log('apple' || 'banana'); //apple
// 앞에 true 값이 나와서 뒤에 값과 상관없이 결과 true
console.log(false || 'banana'); //banana
// 앞에 Truthy한 값이 없으니 뒤 결과까지 확인하고 둘 중 하나라도 true면 true
console.log('apple' || false); //apple
```

→ OR의 경우 ‘apple’이 이미 Truthy 값이어서 true 로 평가되고 논리 연산의 결과를 결정한 첫 번째 피 연산자 apple을 그대로 반환

### 2) &&(AND)

```jsx
console.log('apple' && 'banana'); //banana
// and는 앞과 뒤 모두를 확인하기 때문에 뒷 값으로 평가
console.log(false && 'banana'); //false
// 앞의 값이 false이기 때문에 뒷 값과 상관없이 false
console.log('apple' && false); //false
// 좌항과 우항 둘 중 하나라도 false면 false
```

→ AND의 경우 좌항, 우항을 모두 확인해야 하고 논리 연산의 결과를 결정한 두 번째 피 연산자 banana를 그대로 반환

### 3) !(NOT)

- short circuit evaluation(단축 평가)

: 표현식을 평가하는 도중 결과가 확정 된 경우 나머지 과정을 생략함

```jsx
var num = 1;

if(num % 2 == 0) //조건을 확인해서
    console.log('짝수입니다.');
else
    console.log('홀수입니다.'); //홀수입니다.

// 단축평가를 사용하면 if문을 대체할 수 있다.
num % 2 ==0 && console.log('짝수입니다.'); 
num % 2 ==0 || console.log('홀수입니다.'); //홀수입니다.
```

## 3. ES11 operator

### 1) optional chaining operator(옵셔널 체이닝 연산자)

```jsx
var obj = null;
var val = obj?.value;
console.log(val);
```

? ← 오류를 피하기 위해 사용함 안전하게 값을 가져오기 위해 추가된 문법

### 2) null 병합 연산자
