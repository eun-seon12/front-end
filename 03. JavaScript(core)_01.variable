# Variable

## 1. data-type

data-type은 값의 종류를 말하며 자바스크립트는 7개의 데이터 타입을 제공한다.

### 1) 숫자 타입

자바스크립트의 경우 하나의 숫자 타입만 존재하고 모든 수를 실수 처리한다.

추가적으로 세 가지 특별한 값도 표현 가능

Infinity : 양의 무한대

-Infinity : 음의 무한대

NaN(Not a Number) : 산술 연산 불가 → 숫자가 아님

---

var integer = 10; ← integer 라는 변수 선언과 동시에 값을 10으로 초기화

console.log(integer);

→ run code 동작 시 output은 10, type은 number

### 2) 문자열 타입

문자열은 작은 따옴표( ’ ’ ), 큰 따옴표( “ “ ), 또는 백틱( ` ` )으로 텍스트를 감싼다.

---

var string; ← 변수를 선언

string = ‘javascript’;

---

일반적으로 문자열 내에서는 줄 바꿈 허용x

이 때 2가지 방법

1. 이스케이프 시퀀스 사용
    
    var str = ‘안녕하세요\n 반갑습니다.’;
    

 2. 백틱 사용 ← 모든 공백이 있는 그대로 적용됨

var multiline = `안녕하세요.

반갑습니다.` ;

---

문자열은 문자열 연산자 +를 사용해 연결 가능

```jsx
var lastName = '홍';
var firstName = '길동';

console.log('제 이름은 ' + lastName + firstName + '입니다.');
```

---

-템플릿 리터럴 ( ` ` ) 

: ES6부터 도입 된 멀티라인 문자열, 표현식 삽입 등의 편리한 문자열 처리 기능을 제공하는 문자열 표기법

이 때는 작은 따옴표, 큰 따옴표 대신 백틱을 사용

```jsx
console.log(`제 이름은 ${lastName}${firstName}입니다.`);
// 제 이름은 홍길동입니다.

console.log('제 이름은 ${lastName}${firstName}입니다.');
// 제 이름은 ${lastName}${firstName}입니다.
```

문자열 연산자에 비해 가독성이 좋고 간편함

### 3) 불리언(논리) 타입

값은 논리적 참, 거짓을 나타내는 true와 false뿐

```jsx
var flag = true;
console.log(flag);
flag = false;
console.log(flag);
```

### 4) undefined와 null 타입

-undefined 타입 값은 undefined가 유일

-null 타입 값은 null이 유일 ← 변수의 값이 없다는 것을 의도적으로 명시할 때 사용

### 5) symbol과 object 타입

-Symbol 타입

: 변경 불가능한 원시 타입의 값, 다른 값과 중복되지 않는 값으로 이름 충동할 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용

```jsx
var key = Symbol('key');
console.log(typeof key);
```

-object(객체) 타입

```jsx
var obj = {}; <-객체 생성

obj[key] = 'value';
console.log(obj[key]);
```

*자바스크립트의 데이터 타입은 크게 원시와 객체 타입으로 분류됨

number, string, boolean, defined, null, symbol 6가지 데이터 타입은 원시

이외 값은 모두 객체

{ } 객체, [ ] 배열

## 2. dynamically-typed-language

### 동적 타입 언어

```jsx
/* 동적 타입 언어 */

var test;
console.log(test); <-undefined

test = 1;
console.log(typeof test); <-number

test = 'javascript';
console.log(typeof test); <-string

test = true;
console.log(typeof test); <-boolean

test=null;
console.log(typeof test); <-object

test = Symbol();
console.log(typeof test); <-symbol

test = {};
console.log(typeof test); <-object

test = [];
console.log(typeof test); <-object

test = function(){};
console.log(typeof test); <-function
```

## 3. implicit-coercion(암묵적 타입 변환)

### 1) 문자열 타입으로 변환

: 문자열 연결 연산자(+)로 동작

```jsx
console.log(10 + '20');
// 1020
```

→ 문자열 타입이 아닌 피연산자를 문자열 타입으로 암묵적으로 변환

```jsx
console.log(`10 + 20 : ${10 + 20}`);
// 10 + 20 + 30
```

→ 템플릿 리터럴 표현식 삽입 ${10 + 20} 은 표현식의 결과(30)를 문자열 타입으로 암묵적으로 변환

```jsx
console.log(1 +''); //"1"
console.log(NaN +''); //"NaN"
console.log(Infinity + ''); //Infinity
console.log(true + ''); //true
console.log(null +''); //null
console.log(undefined+''); //undefined
// console.log(Symbol() +''); 심볼은 안 됨 오류남
console.log({} + '');  //"[object Object]"
console.log([] + '');
console.log(function(){} + ''); // "fuction(){}"
```

→ 문자열 타입이 아닌 값을 문자열 타입으로 암묵적으로 변환하는 결과

### 2) 숫자 타입으로 변환

```jsx
console.log(10 - '5'); //5
console.log(10 * '5'); //50
console.log(10 / '5'); //2
console.log(10 % 'javascript'); //NaN
```

→ 산술 연산자의 피 연산자는 모두 숫자여야 하므로 숫자가 아닌 피 연산자를 숫자 타입으로 암묵적 타입 변환

→ 플러스 이외의 연산자는 암묵적으로 숫자로 변환됨

```jsx
console.log(10 > '5'); //true
```

→ 비교 연산자로 크기를 비교하기 위해 모두 숫자여야 하므로 숫자가 아닌 피 연산자를 숫자 타입으로 암묵적 타입 변환

```jsx
console.log(+''); //0
console.log(+'1'); //1
console.log(+'javascript'); //NaN
console.log(+true); //1 <-true는 항상 1의 값
console.log(+false); //0 <-false는 항상 0의 값
console.log(+ null); //0
console.log(+undefined); //NaN
// console.log(+Symbol()); <-오류
console.log(+{}); //NaN
console.log(+[]); //0
console.log(+function(){}); //NaN
```

→ + 단항 연산자는 피 연산자가 숫자 타입의 값이 아니면 숫자 타입의 값으로 암묵적 타입 변환

→ 빈 문자열, 빈 배열, null, false는 0으로 true는 1로 변환되고 객체{ }와 undefined는 변환되지 않아서 NaN

### 3) 불리언(논리) 타입으로 변환

자바스크립트 엔진은 불리언 타입이 아닌 값을 Truthy 값(참으로 평가되는 값) 또는 Falsy(거짓으로 평가되는 값)으로 구분함

Truthy → true, Falsy → false 암묵적 타입 변환 됨

```jsx
if(true) console.log("if(true)"); // if(true)
if(false) console.log("if(false)");
if(undefined) console.log("if(undifined");
if(null) console.log("if(null)");
if(0) console.log("if(0)");
if(NaN) console.log("if(NaN)");
if('') console.log("if('')");
if('javascript') console.log("if('javascript')"); //if('javascript')
```

→ false, undefined, null, 0, NaN, ‘ ’(빈 문자열) 은 Falsy 값이며 이 외의 모든 값은 Truthy

## 4. explicit-coercion(명시적 타입 변환)

자바스크립트에서 기본 제공하는 표준 빌트인 생성자 함수(String, Number, Boolean)를 new 연산자 없이 호출하는 방법, 빌트인 메서드를 사용하는 방법, 암묵적 타입 변환을 이용하는 방법이 있음

### 1) 문자열 타입으로 변환

      (1) String( ) 생성자 함수를 new 연산자 없이 호출

```jsx
console.log(String(10)); //"10"
console.log(String(NaN)); //"NaN"
console.log(String(Infinity)); //"Infinity"
console.log(String(true)); //"true"
console.log(String(false)); //"false"
```

(2) Object.prototype.toString 메서드 사용

```jsx
console.log((10).toString()); //"10"
console.log((NaN).toString()); //"NaN"
console.log((Infinity).toString()); //"Infinity"
console.log((true).toString()); //"true"
console.log((false).toString()); //"false"
```

(3) 문자열 연결 연산자(+) 이용

### 2) 숫자 타입으로 변환

(1) Number 생성자 함수를 new 연산자 없이 호출

```jsx
console.log(Number('10')); //10
console.log(Number('10.01')); //10.01
console.log(Number(true)); //1
console.log(Number(false)); //0
```

(2) parseInt, parseFloat 함수 이용

```jsx
console.log(parseInt('10')); //10
console.log(parseFloat('10')); //10
console.log(parseInt('10.01')); //10
console.log(parseFloat('10.01')); //10.01
```

(3) + 단항 산술 연산자 이용

(4) * 산술 연산자 이용

```jsx
console.log('10' * 1);  // 10
console.log(typeof('10' * 1)); //number
console.log('10.01' * 1); //10.01
console.log(typeof('10.01' * 1)); //number
console.log(true* 1); //1
console.log(false * 1); //0
```

→  타입오브(typeof)를 사용해서 타입 확인

### 3) 불리언(논리) 타입으로 변환

(1) Boolean 생성자 함수

```jsx
console.log(Boolean('javascript')); //true
console.log(Boolean('')); //false
console.log(Boolean('1')); //true
console.log(Boolean('0')); //true
console.log(Boolean(NaN)); //false
console.log(Boolean(Infinity)); //true
console.log(Boolean(null)); //false
console.log(Boolean(undefined)); //false
console.log(Boolean({})); //true
console.log(Boolean([])); //true
```

(2) ! 부정 논리 연산자를 두번 사용

```jsx
console.log(!!'javascript'); //true
```

→ ! 연산자를 한 번 쓰면 불리언 값으로 변환하고 !! 연산자를 두 번 쓰면 그 값을 반전시킴
