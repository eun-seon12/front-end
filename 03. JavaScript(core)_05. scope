## 1. scope

- scope : 변수에 접근할 수 있는 범위

### 1) 전역과 지역 스코프(global and local scope)

전역은 코드의 가장 바깥 영역을 말하며 전역은 전역 스코프를 만듦

전역에 변수를 선언하면 전역 스코프를 갖는 전역 변수가 되며, 전역 변수는 어디서든지 참조할 수 있음

지역이란 함수 몸체 내부를 말하며 지역은 지역 스코프를 만듦

지역에 변수를 선언하면 지역 스코프를 갖는 지역 변수가 되며, 자신의 지역 스코프와 하위 지역 스코프에서 유효

```jsx
var x ='global x';
var y ='global y';

function outer() {
    var z = "outer local z";

    console.log(x);
    console.log(y);
    console.log(z);

    function inner() {
        var x = "inner local x";

        console.log(x);
        console.log(y);
        console.log(z);

    }

    inner();
}

outer();

console.log(x);
// console.log(z);
```

### 2) 함수 레벨 스코프

```
var i = 0;

for(var i = 0; i <10; i++) {
    
}

console.log(i); //10
```

의도와 달리 for 코드 블록 내부에서의 값으로 반영이 되어버림

→ var 키워드의 문제점

## 2. let and const

### 1) var

- 3가지 문제점을 야기함
    
    (1) 변수 중복 선언 허용
    
    초기화 문이 있는 변수 선언문은 자바스크립트 엔진에 의해 초기화 됨 var 키워드가 없는 것 처럼 동작
    
    (2) 함수 레벨 스코프
    
    함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언해도 모두 전역 변수가 됨 → 의도와 달리 코드 블록 내부에서의 값으로 반영이 되어버림
    
    (3) 변수 호이스팅
    
    var 키워드로 변수를 선언하면 변수 호이스팅에 의해 변수 선언문이 스코프의 선두로 끌어올려진 것처럼 동작 → 변수 선언문 이전에 참조할 수 있음
    
    이는 실행 시 오류가 발생하진 x 하지만 프로그램의 흐름에 맞지 않고 가독성 bad 오류를 만들 여지가 있음
    
    → 단점을 보완하기 위해 let, const 키워드 도입
    

### 2) let

(1) 변수 중복 선언 금지

같은 스코프 내에서 중복 선언을 허용하지 않음

(2) 블록 레벨 스코프

 let 키워드로 선언한 변수는 모든 코드 블록(함수, if문, for문, while문, try/catch문)을 지역 스코프로 인정 → var 키워드는 값이 변했는데 let은 변하지x

```jsx
let i=0; //전역에 i=0 선언
for(let i=0;i<10;i++) {
    console.log(`지역 변수 i : ${i}`);

}

console.log(i);
```

let에 쓴 i(지역변수) 랑 for문의 i(지역변수) 랑은 상관없음!!

(3) 변수 호이스팅

```jsx
console.log(x);
let x=10;
```

오류가 나는데 x가 초기화가 안되어서 접근할 수 없다고 뜸 <- 초기화 전에 참조화 하려고 해서 나는 오류

### 3) const

const 키워드는 상수를 선언하기 위해 사용

let 키워드와 동일하게 블록 레벨 스코프를 가지며 변수 호이스팅이 발생하지 않는 것처럼 동작

(1) 선언한 변수는 반드시 동시에 초기화 해야 함

const x; ← 선언만 하면 오류 남 반드시 할당해야 함

const x=1; ← 이렇게

(2) 선언한 변수는 재할당 금지

x=2;

console.log(x);

→ 오류

- 상수 : 재할당이 금지 된 변수
    
    const 키워드로 선언된 변수에 원시 값은 변경할 수 없는 값이고,
    
    const 키워드에 의해 재할당이 금지되므로 할당 된 값을 변경할 수 있는 방법은 없음
    
    일반적으로 상수의 이름은 대문자로 선언해 상수임을 명확히 나타내며
    
    여러단어로 이루어진 경우 언더스코어(_)로 구분하여 스네이크케이스로 표현하는 것이 일반적
  ```jsx
const DISCOUNT_RATE = 0.15;
// 정가
let price = 15000;
// 할인가
let discountPrice = price * (1-DISCOUNT_RATE);
console.log(discountPrice);

// const 키워드로 선언 된 변수에 객체를 할당한 경우 값을 변경할 수 있다.
const student = {

    name :'홍길동',
    age : 20
};

// const 키워드로 객체를 할당한 경우라서 가능!!

student.name ='유관순';
console.log(student);

// 프로퍼티 값은 재할당할 수 있지만 객체 자체에 재할당은 불가능함
// student={};
```
